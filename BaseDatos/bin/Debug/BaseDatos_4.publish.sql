/*
Deployment script for LaboratorioProgra6

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LaboratorioProgra6"
:setvar DefaultFilePrefix "LaboratorioProgra6"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_Vehiculo_FechaModelo]...';


GO
ALTER TABLE [dbo].[Vehiculo] DROP CONSTRAINT [DF_Vehiculo_FechaModelo];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Vehiculo_MarcaVehiculo]...';


GO
ALTER TABLE [dbo].[Vehiculo] DROP CONSTRAINT [FK_Vehiculo_MarcaVehiculo];


GO
PRINT N'Starting rebuilding table [dbo].[Vehiculo]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Vehiculo] (
    [VehiculoId]      INT            IDENTITY (1, 1) NOT NULL,
    [MarcaVehiculoId] INT            NOT NULL,
    [Matricula]       VARCHAR (250)  NOT NULL,
    [Color]           VARCHAR (250)  NOT NULL,
    [Modelo]          VARCHAR (250)  NOT NULL,
    [FechaModelo]     DATE           CONSTRAINT [DF_Vehiculo_FechaModelo] DEFAULT ('2020-01-01') NOT NULL,
    [TieneDefectos]   BIT            CONSTRAINT [DF_Vehiculo_TieneDefectos] DEFAULT (0) NOT NULL,
    [Defectos]        VARCHAR (1000) NULL,
    [Estado]          BIT            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Vehiculo1] PRIMARY KEY CLUSTERED ([VehiculoId] ASC)
)
WITH (DATA_COMPRESSION = PAGE);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Vehiculo])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Vehiculo] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Vehiculo] ([VehiculoId], [MarcaVehiculoId], [Matricula], [Color], [Modelo], [FechaModelo], [Estado])
        SELECT   [VehiculoId],
                 [MarcaVehiculoId],
                 [Matricula],
                 [Color],
                 [Modelo],
                 [FechaModelo],
                 [Estado]
        FROM     [dbo].[Vehiculo]
        ORDER BY [VehiculoId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Vehiculo] OFF;
    END

DROP TABLE [dbo].[Vehiculo];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Vehiculo]', N'Vehiculo';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Vehiculo1]', N'PK_Vehiculo', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[Vehiculo].[IDX_Vehiculo_Matricula]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IDX_Vehiculo_Matricula]
    ON [dbo].[Vehiculo]([Matricula] ASC) WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Vehiculo_MarcaVehiculo]...';


GO
ALTER TABLE [dbo].[Vehiculo] WITH NOCHECK
    ADD CONSTRAINT [FK_Vehiculo_MarcaVehiculo] FOREIGN KEY ([MarcaVehiculoId]) REFERENCES [dbo].[MarcaVehiculo] ([MarcaVehiculoId]);


GO
PRINT N'Altering Procedure [dbo].[VehiculoActualizar]...';


GO
ALTER PROCEDURE dbo.VehiculoActualizar
	@VehiculoId INT,
	@MarcaVehiculoId INT,
    @Matricula VARCHAR(250),
	@Color VARCHAR(250),
	@Modelo VARCHAR(250),
	@Estado BIT,
	@FechaModelo DATE,
	@TieneDefectos BIT ,
	@Defectos VARCHAR(1000)= NULL
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY
	-- AQUI VA EL CODIGO
		
	UPDATE dbo.Vehiculo SET
	 MarcaVehiculoId=@MarcaVehiculoId,
	 Matricula=@Matricula,
	 Color=@Color,
	 Modelo=@Modelo,
	 Estado=@Estado,
	 FechaModelo=@FechaModelo,
	 TieneDefectos=@TieneDefectos,
	 Defectos=@Defectos

	WHERE VehiculoId=@VehiculoId

		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Altering Procedure [dbo].[VehiculoInsertar]...';


GO
ALTER PROCEDURE dbo.VehiculoInsertar
    @MarcaVehiculoId INT,
	@Matricula varchar(250)	,
	@Color varchar(250)	,
	@Modelo varchar(250),
	@Estado BIT,
	@FechaModelo DATE,
	@TieneDefectos BIT ,
	@Defectos VARCHAR(1000)= NULL
	
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY
	-- AQUI VA EL CODIGO
		
		INSERT INTO dbo.Vehiculo 
		(
	     MarcaVehiculoId
	    , Matricula 
	    , Color
	    , Modelo 
	    , Estado 
		, FechaModelo
		, TieneDefectos
		, Defectos
		)
		VALUES
		(
		 @MarcaVehiculoId
	    , @Matricula 
	    , @Color
	    , @Modelo 
	    , @Estado 
		, @FechaModelo
		, @TieneDefectos
		, @Defectos
		)


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Altering Procedure [dbo].[VehiculoObtener]...';


GO
ALTER PROCEDURE [dbo].VehiculoObtener
@VehiculoId INT=NULL

AS BEGIN
	SET NOCOUNT ON

	SELECT
			V.VehiculoId
		,   V.Matricula
		,   V.Color
		,   V.Modelo
		,   V.Estado
		,   V.FechaModelo
		,	V.TieneDefectos
		,   V.Defectos
		,   MV.MarcaVehiculoId
		,	MV.Descripcion
				

	FROM dbo.Vehiculo V
	 INNER JOIN dbo.MarcaVehiculo MV
         ON V.MarcaVehiculoId = MV.MarcaVehiculoId
	WHERE
	     (@VehiculoId IS NULL OR VehiculoId=@VehiculoId)

END
GO
PRINT N'Creating Procedure [dbo].[MarcaVehiculoLista]...';


GO
CREATE PROCEDURE dbo.MarcaVehiculoLista

AS
	BEGIN
		SET NOCOUNT ON



		SELECT 
		MarcaVehiculoId,
		Descripcion

		FROM	
			dbo.MarcaVehiculo

			WHERE
					Estado=1






	END
GO
PRINT N'Refreshing Procedure [dbo].[VehiculoEliminar]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VehiculoEliminar]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Vehiculo] WITH CHECK CHECK CONSTRAINT [FK_Vehiculo_MarcaVehiculo];


GO
PRINT N'Update complete.';


GO
